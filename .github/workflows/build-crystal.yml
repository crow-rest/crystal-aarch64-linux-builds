name: Build Crystal

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.set.outputs.should }}
      version: ${{ steps.set.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Latest crystal version (Remote)
        run: echo "CRYSTAL_LATEST=$(git ls-remote --tags https://github.com/crystal-lang/crystal.git | grep -o 'refs/tags/[0-9]*\.[0-9]*\.[0-9]*' | sort -r | head -n 1 | grep -o '[^\/]*$')" >> $GITHUB_ENV
      - name: Latest crystal version (Built)
        run: echo "CRYSTAL_BUILT_LATEST=$(curl -fsSL https://github.com/crow-rest/crystal-aarch64-linux-builds/releases/download/track/crystal-version)" >> $GITHUB_ENV
      - name: Set Output
        id: set
        run: |
          echo "should=${{ (env.CRYSTAL_LATEST != env.CRYSTAL_BUILT_LATEST) || (github.event_name == 'pull_request') }}" >> $GITHUB_OUTPUT
          echo "version=${{ env.CRYSTAL_LATEST }}" >> $GITHUB_OUTPUT
      - name: Print
        run: echo ${{ steps.set.outputs.should }}

  build:
    runs-on: ubuntu-latest
    needs: [ check ]
    if: ${{ needs.check.outputs.should-build != 'false' }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache llvm
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            llvm
          key: ${{ runner.os }}-llvm-14
      - name: Cache crystal
        uses: actions/cache@v3
        with:
          path: |
            crystal
            bdwgc
          key: ${{ runner.os }}-crystal-build-${{ needs.check.outputs.version }}
      - name: Install pkgs
        run: sudo apt update && sudo apt-get install -y libbsd-dev libedit-dev libevent-dev 
          libgmp-dev libgmpxx4ldbl libpcre3-dev libssl-dev libtool libxml2-dev libyaml-dev libz-dev
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: 14
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - name: Install crystal
        run: curl -fsSL https://crystal-lang.org/install.sh | sudo bash
      - name: Clone repos
        run: |
          git -C bdwgc fetch || git clone https://github.com/ivmai/bdwgc.git bdwgc
          git -C crystal fetch || git clone https://github.com/crystal-lang/crystal.git crystal
      - name: Make bdwgc latest tag
        working-directory: ./bdwgc
        run: git checkout $(git describe --tags --abbrev=0)
      - name: Get bdwgc deps
        working-directory: ./bdwgc
        run: git -C libatomic_ops pull origin master || git clone https://github.com/ivmai/libatomic_ops.git
      - name: Build and install bdwgc
        working-directory: ./bdwgc
        run: |
          [ -f Makefile ] && make clean
          autoreconf -vif
          ./configure --enable-static --disable-shared
          make -j
          make check
          sudo make install
      - name: Make crystal latest tag
        working-directory: ./crystal
        run: git checkout ${{ needs.check.outputs.version }}
      - name: Build crystal
        working-directory: ./crystal
        run: |
          make clean
          FLAGS=--verbose make crystal verbose=1
      - name: Build aarch64-unknown-linux-gnu object file
        working-directory: ./crystal
        run: ./bin/crystal build src/compiler/crystal.cr --cross-compile --target=aarch64-unknown-linux-gnu -D without_openssl -D without_zlib --verbose
      - name: Move aarch64-unknown-linux-gnu object file
        working-directory: ./crystal
        run: mv crystal.o crystal-arm64.o
      - name: Build x86_64-unknown-linux-gnu object file
        working-directory: ./crystal
        run: ./bin/crystal build src/compiler/crystal.cr --cross-compile --target=x86_64-unknown-linux-gnu -D without_openssl -D without_zlib --verbose
      - name: Move x86_64-unknown-linux-gnu object file
        working-directory: ./crystal
        run: mv crystal.o crystal-amd64.o
      - name: Store unknown-linux-gnu object file
        uses: actions/upload-artifact@v3
        with:
          name: obj-unknown-linux-gnu
          path: |
            crystal/crystal-arm64.o
            crystal/crystal-amd64.o
      - name: Build aarch64-unknown-linux-musl object file
        working-directory: ./crystal
        run: ./bin/crystal build src/compiler/crystal.cr --cross-compile --target=aarch64-unknown-linux-musl -D without_openssl -D without_zlib --verbose
      - name: Move aarch64-unknown-linux-musl object file
        working-directory: ./crystal
        run: mv crystal.o crystal-arm64.o
      - name: Build x86_64-unknown-linux-musl object file
        working-directory: ./crystal
        run: ./bin/crystal build src/compiler/crystal.cr --cross-compile --target=x86_64-unknown-linux-musl -D without_openssl -D without_zlib --verbose
      - name: Move x86_64-unknown-linux-musl object file
        working-directory: ./crystal
        run: mv crystal.o crystal-amd64.o
      - name: Store unknown-linux-musl object file
        uses: actions/upload-artifact@v3
        with:
          name: obj-unknown-linux-musl
          path: |
            crystal/crystal-arm64.o
            crystal/crystal-amd64.o

  crystal-builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: unknown-linux-gnu
            flag: latest
            flag-tag: ""
          - target: unknown-linux-musl
            flag: alpine
            flag-tag: -alpine
    runs-on: ubuntu-latest
    needs: [ check, build ]
    steps:
      - uses: actions/checkout@v3
      - name: Cache edge crystal
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/cache@v3
        with:
          path: |
            docker-cache
          key: ${{ runner.os }}-docker-cache-${{ matrix.target }}
      - name: Download crystal.o
        uses: actions/download-artifact@v3
        with:
          name: obj-${{ matrix.target }}
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.${{ matrix.flag }}
          load: true
          tags: ghcr.io/crow-rest/crystal:${{ matrix.flag }},ghcr.io/crow-rest/crystal:${{ needs.check.outputs.version }}${{ matrix.flag-tag }}
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=docker-cache
          cache-to: type=local,dest=docker-cache
      - name: Push Image
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker push ghcr.io/crow-rest/crystal:${{ matrix.flag }}
          docker push ghcr.io/crow-rest/crystal:${{ needs.check.outputs.version }}${{ matrix.flag-tag }}
      - name: Push Image edge
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker image tag ghcr.io/crow-rest/crystal:${{ needs.check.outputs.version }}${{ matrix.flag-tag }} ghcr.io/crow-rest/crystal:edge${{ matrix.flag-tag }}
          docker push ghcr.io/crow-rest/crystal:edge${{ matrix.flag-tag }}
      - name: Extract binary arm64
        run: docker run --rm --platform=linux/arm64 --mount type=bind,source=$(pwd),target=/app --pull=never ghcr.io/crow-rest/crystal:${{ matrix.flag }} sh -c "cp /usr/local/bin/crystal /usr/local/bin/shards /app"
      - name: Tar aarch64
        run: tar -czvf aarch64-${{ matrix.target }}.tar.gz crystal shards
      - name: Hash
        run: sha256sum aarch64-${{ matrix.target }}.tar.gz >> aarch64-${{ matrix.target }}.sha256
      - name: Extract binary amd64
        run: docker run --rm --platform=linux/amd64 --mount type=bind,source=$(pwd),target=/app --pull=never ghcr.io/crow-rest/crystal:${{ matrix.flag }} sh -c "cp /usr/local/bin/crystal /usr/local/bin/shards /app"
      - name: Tar x86_64
        run: tar -czvf x86_64-${{ matrix.target }}.tar.gz crystal shards
      - name: Hash
        run: sha256sum x86_64-${{ matrix.target }}.tar.gz >> x86_64-${{ matrix.target }}.sha256
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            aarch64-${{ matrix.target }}.tar.gz
            aarch64-${{ matrix.target }}.sha256
            x86_64-${{ matrix.target }}.tar.gz
            x86_64-${{ matrix.target }}.sha256
      - name: Release Artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.4.0
        with:
          tag: crystal-${{ needs.check.outputs.version }}
          release_name: crystal-${{ needs.check.outputs.version }}
          overwrite: true
          file_glob: true
          file: "*-${{ matrix.target }}*"

  publish:
    runs-on: ubuntu-latest
    needs: [ check, build, crystal-builds ]
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
      - name: Make file
        run: echo ${{ needs.check.outputs.version }} > ./crystal-version
      - name: Set track
        uses: svenstaro/upload-release-action@2.4.0
        with:
          tag: track
          release_name: track
          overwrite: true
          prerelease: true
          file: crystal-version
      - name: Delete untagged containers
        uses: duskmoon314/action-delete-ghcr-untagged@v1
        with:
          token: ${{ secrets.DELETE_PKGS_TOKEN }}
          owner_type: org
          package_name: crystal
          expiration: 30
